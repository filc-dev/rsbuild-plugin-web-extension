[{"id":0,"title":"Configuration","content":"#\n\nLearn about all configuration options available in rsbuild-plugin-web-extension.\n\n\nPlugin Options#\n\nThe plugin accepts a configuration object with the following options:\n\n\n\n\nmanifest#\n\n * Type: chrome.runtime.ManifestV3\n * Required: true\n\nThe Chrome Extension Manifest V3 configuration object. This will be processed\nand written to dist/manifest.json during build.\n\n\n\n\nAutomatic Configurations#\n\nThe plugin automatically configures several Rsbuild settings to optimize web\nextension development:\n\n\nEntry Points#\n\nEntry points are automatically derived from your manifest configuration:\n\n * popup: From manifest.action.default_popup\n * devtools: From manifest.devtools_page\n * newtab: From manifest.chrome_url_overrides.newtab\n * options: From manifest.options_ui.page\n * background: From manifest.background.service_worker\n\n\nOutput Configuration#\n\n\n\n\nDevelopment Server#\n\n\n\n\nHot Module Replacement#\n\n\n\n\nEnvironment Variables#\n\n\nPORT#\n\nChange the development server port:\n\n\n\n\nFIREFOX#\n\nEnable Firefox-specific manifest transformations:\n\n\n\nThis will:\n\n * Convert background.service_worker to background.scripts\n * Add Firefox-compatible content_security_policy\n * Handle options_page vs options_ui differences\n\n\nFile Processing#\n\n\nAutomatic Extension Transformation#\n\nThe plugin automatically transforms file extensions in the manifest:\n\n * .tsx, .jsx, .ts → .js\n * .scss, .sass, .stylus → .css\n\n\n\n\nHTML Entry Processing#\n\nFor each HTML file in your manifest, the plugin:\n\n 1. Creates an Rsbuild entry point\n 2. Configures HTMLPlugin to process the template\n 3. Converts .html references to their corresponding .tsx/.jsx files\n\n\nIntegration with Other Plugins#\n\n\nReact#\n\n\n\n\nVue#\n\n\n\n\nTypeScript#\n\nTypeScript support is enabled by default. Make sure to install Chrome types:\n\n\n\n\nCustom Rsbuild Configuration#\n\nYou can still customize Rsbuild configuration alongside the plugin:\n\n\n\n\nTroubleshooting#\n\n\nCommon Issues#\n\nHMR not working in extension pages\n\nMake sure dev.writeToDisk is true (this is set automatically by the plugin).\n\nExtension not loading after changes\n\n 1. Check the browser's extension management page for errors\n 2. Reload the extension manually\n 3. Verify the dist/manifest.json is being generated correctly\n\nTypeScript errors with Chrome APIs\n\nInstall Chrome types:\n\n\n\nAdd to your tsconfig.json:\n\n","routePath":"/guide/configuration","lang":"","toc":[{"text":"Plugin Options","id":"plugin-options","depth":2,"charIndex":85},{"text":"manifest","id":"manifest","depth":3,"charIndex":176},{"text":"Automatic Configurations","id":"automatic-configurations","depth":2,"charIndex":371},{"text":"Entry Points","id":"entry-points","depth":3,"charIndex":500},{"text":"Output Configuration","id":"output-configuration","depth":3,"charIndex":827},{"text":"Development Server","id":"development-server","depth":3,"charIndex":853},{"text":"Hot Module Replacement","id":"hot-module-replacement","depth":3,"charIndex":877},{"text":"Environment Variables","id":"environment-variables","depth":2,"charIndex":905},{"text":"PORT","id":"port","depth":3,"charIndex":930},{"text":"**FIREFOX**","id":"firefox","depth":3,"charIndex":-1},{"text":"File Processing","id":"file-processing","depth":2,"charIndex":1212},{"text":"Automatic Extension Transformation","id":"automatic-extension-transformation","depth":3,"charIndex":1231},{"text":"HTML Entry Processing","id":"html-entry-processing","depth":3,"charIndex":1399},{"text":"Integration with Other Plugins","id":"integration-with-other-plugins","depth":2,"charIndex":1629},{"text":"React","id":"react","depth":3,"charIndex":1663},{"text":"Vue","id":"vue","depth":3,"charIndex":1674},{"text":"TypeScript","id":"typescript","depth":3,"charIndex":1683},{"text":"Custom Rsbuild Configuration","id":"custom-rsbuild-configuration","depth":2,"charIndex":1777},{"text":"Troubleshooting","id":"troubleshooting","depth":2,"charIndex":1880},{"text":"Common Issues","id":"common-issues","depth":3,"charIndex":1899}],"domain":"","frontmatter":{},"version":""},{"id":1,"title":"Examples","content":"","routePath":"/guide/examples","lang":"","toc":[{"text":"Available Examples","id":"available-examples","depth":2,"charIndex":-1},{"text":"React Example","id":"react-example","depth":3,"charIndex":-1},{"text":"Running the Example","id":"running-the-example","depth":4,"charIndex":-1},{"text":"Project Structure","id":"project-structure","depth":4,"charIndex":-1},{"text":"Creating Custom Examples","id":"creating-custom-examples","depth":2,"charIndex":-1},{"text":"Basic Popup Extension","id":"basic-popup-extension","depth":3,"charIndex":-1},{"text":"1. Setup","id":"1-setup","depth":4,"charIndex":-1},{"text":"2. Manifest Configuration","id":"2-manifest-configuration","depth":4,"charIndex":-1},{"text":"3. Rsbuild Configuration","id":"3-rsbuild-configuration","depth":4,"charIndex":-1},{"text":"4. Popup Implementation","id":"4-popup-implementation","depth":4,"charIndex":-1},{"text":"5. Package Scripts","id":"5-package-scripts","depth":4,"charIndex":-1},{"text":"Background Script Example","id":"background-script-example","depth":3,"charIndex":-1},{"text":"Manifest Update","id":"manifest-update","depth":4,"charIndex":-1},{"text":"Background Implementation","id":"background-implementation","depth":4,"charIndex":-1},{"text":"Updated Popup with Background Communication","id":"updated-popup-with-background-communication","depth":4,"charIndex":-1},{"text":"Content Script Example","id":"content-script-example","depth":3,"charIndex":-1},{"text":"Manifest Update","id":"manifest-update-1","depth":4,"charIndex":-1},{"text":"Content Script Implementation","id":"content-script-implementation","depth":4,"charIndex":-1},{"text":"DevTools Extension Example","id":"devtools-extension-example","depth":3,"charIndex":-1},{"text":"Manifest Update","id":"manifest-update-2","depth":4,"charIndex":-1},{"text":"DevTools Implementation","id":"devtools-implementation","depth":4,"charIndex":-1},{"text":"More Examples","id":"more-examples","depth":2,"charIndex":-1},{"text":"Community Examples","id":"community-examples","depth":2,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":2,"title":"FAQ","content":"#\n\nFrequently asked questions about rsbuild-plugin-web-extension.\n\n\nInstallation & Setup#\n\n\nQ: What versions of Node.js are supported?#\n\nA: The plugin requires Node.js 16 or higher. We recommend using the latest LTS\nversion for the best experience.\n\n\nQ: Can I use this with existing Rsbuild projects?#\n\nA: Yes! Simply install the plugin and add it to your rsbuild.config.ts. The\nplugin will automatically configure everything needed for web extension\ndevelopment.\n\n\nQ: Do I need to configure webpack manually?#\n\nA: No, the plugin handles all webpack/Rspack configuration automatically. It\nconfigures entry points, HTML generation, and output settings optimized for web\nextensions.\n\n\nDevelopment#\n\n\nQ: Why isn't Hot Module Replacement (HMR) working in my extension?#\n\nA: Make sure:\n\n 1. You're loading the extension from the dist folder, not the src folder\n 2. The development server is running (npm run dev)\n 3. You've reloaded the extension after making changes\n\nThe plugin automatically sets writeToDisk: true to ensure files are written for\nextension loading.\n\n\nQ: How do I debug my extension during development?#\n\nA:\n\n 1. Chrome DevTools: Right-click on your extension popup → \"Inspect\"\n 2. Background Script: Go to chrome://extensions, find your extension, click\n    \"background page\" or \"service worker\"\n 3. Content Scripts: Use regular Chrome DevTools on the page where your content\n    script runs\n 4. Console Logs: Check the browser console and extension console for errors\n\n\nQ: Can I use CSS-in-JS libraries like styled-components?#\n\nA: Yes! The plugin works with any CSS solution supported by Rsbuild, including:\n\n * CSS Modules\n * Sass/SCSS\n * PostCSS\n * styled-components\n * Emotion\n * Tailwind CSS\n\n\nQ: How do I handle environment variables?#\n\nA: Use Rsbuild's built-in environment variable support:\n\n\n\n\nManifest & Configuration#\n\n\nQ: Can I use dynamic values in my manifest?#\n\nA: Yes! Your manifest is a TypeScript file, so you can use any JavaScript:\n\n\n\n\nQ: How do I add content scripts?#\n\nA: Add them to your manifest configuration:\n\n\n\nThen create the files in your src/content/ directory. The plugin will handle\nbundling automatically.\n\n\nQ: What about web accessible resources?#\n\nA: Include them in your manifest:\n\n\n\nPlace the files in your src/ directory and they'll be copied to the output.\n\n\nMulti-browser Support#\n\n\nQ: How do I test my extension in Firefox?#\n\nA: Use the Firefox environment flag:\n\n\n\nThe plugin automatically converts your Chrome manifest to Firefox format.\n\n\nQ: What are the main differences between Chrome and Firefox?#\n\nA: The plugin handles these differences automatically:\n\n * Background scripts vs service workers\n * options_ui vs options_page\n * Different Content Security Policy formats\n * API namespaces (chrome.* vs browser.*)\n\n\nQ: Should I use webextension-polyfill?#\n\nA: We recommend it for consistent API usage across browsers:\n\n\n\n\n\n\nBuild & Deployment#\n\n\nQ: How do I build for production?#\n\nA: Use the build command:\n\n\n\nThis creates an optimized build in the dist folder ready for publishing.\n\n\nQ: Why are there no file hashes in the output?#\n\nA: Extensions require consistent file names for the manifest references. The\nplugin automatically disables filename hashing to ensure compatibility.\n\n\nQ: How do I package my extension for the Chrome Web Store?#\n\nA: After building:\n\n 1. Zip the entire dist folder\n 2. Upload to the Chrome Web Store Developer Dashboard\n 3. Fill in the required metadata and submit for review\n\n\nQ: Can I automate the build process?#\n\nA: Yes! Here's an example GitHub Action:\n\n\n\n\nTroubleshooting#\n\n\nQ: I'm getting \"Invalid manifest\" errors#\n\nA: Common causes:\n\n 1. Missing required fields: Ensure manifest_version, name, and version are\n    present\n 2. Invalid permissions: Check the Chrome extension permissions documentation\n 3. File paths: Verify all referenced files exist in your src directory\n 4. Manifest V3 compatibility: Make sure you're using Manifest V3 syntax\n\n\nQ: My background script isn't working#\n\nA: Check:\n\n 1. Service worker vs background script: Make sure you're using service_worker\n    for Manifest V3\n 2. Module type: Set \"type\": \"module\" in your background configuration\n 3. Console errors: Check the service worker console for errors\n 4. Registration: Verify the background script is registered in the manifest\n\n\nQ: Content scripts aren't injecting#\n\nA: Verify:\n\n 1. Match patterns: Ensure your matches array includes the target URLs\n 2. Permissions: Some sites require host permissions\n 3. Timing: Try different run_at values (document_start, document_end,\n    document_idle)\n 4. File paths: Check that the content script files exist\n\n\nQ: Extension pages are blank#\n\nA: This usually indicates:\n\n 1. Build errors: Check the console for JavaScript errors\n 2. Missing dependencies: Ensure all imports are correct\n 3. CSP violations: Check for Content Security Policy issues\n 4. File paths: Verify the HTML files reference the correct entry points\n\n\nQ: How do I report a bug?#\n\nA: Please open an issue with:\n\n 1. Plugin version\n 2. Rsbuild version\n 3. Node.js version\n 4. Minimal reproduction case\n 5. Error messages or console output\n\n\nPerformance#\n\n\nQ: My extension bundle is too large#\n\nA: Try these optimizations:\n\n 1. Tree shaking: Ensure you're importing only what you need\n 2. Code splitting: Use dynamic imports for large dependencies\n 3. Bundle analysis: Use Rsbuild's bundle analyzer to identify large\n    dependencies\n 4. Minimize dependencies: Avoid large libraries in content scripts\n\n\nQ: Build times are slow#\n\nA: Optimization tips:\n\n 1. Use development mode: Run npm run dev for faster builds during development\n 2. Exclude unnecessary files: Use .gitignore patterns to exclude files\n 3. Update dependencies: Ensure you're using the latest versions\n\n\nIntegration#\n\n\nQ: Can I use this with other build tools?#\n\nA: The plugin is designed specifically for Rsbuild/Rspack. For other build\ntools:\n\n * Webpack: Use the raw webpack configuration as inspiration\n * Vite: Consider vite-plugin-web-extension\n * Rollup: Use manual configuration with appropriate plugins\n\n\nQ: How do I migrate from webpack?#\n\nA:\n\n 1. Install Rsbuild and this plugin\n 2. Convert your webpack config to Rsbuild format\n 3. Update your manifest to use TypeScript format\n 4. Update your build scripts\n 5. Test thoroughly in both browsers\n\nThe Rsbuild migration guide provides detailed instructions.\n\n--------------------------------------------------------------------------------\n\nDon't see your question here? Open an issue or start a discussion on GitHub!","routePath":"/guide/faq","lang":"","toc":[{"text":"Installation & Setup","id":"installation--setup","depth":2,"charIndex":67},{"text":"Q: What versions of Node.js are supported?","id":"q-what-versions-of-nodejs-are-supported","depth":3,"charIndex":91},{"text":"Q: Can I use this with existing Rsbuild projects?","id":"q-can-i-use-this-with-existing-rsbuild-projects","depth":3,"charIndex":250},{"text":"Q: Do I need to configure webpack manually?","id":"q-do-i-need-to-configure-webpack-manually","depth":3,"charIndex":465},{"text":"Development","id":"development","depth":2,"charIndex":682},{"text":"Q: Why isn't Hot Module Replacement (HMR) working in my extension?","id":"q-why-isnt-hot-module-replacement-hmr-working-in-my-extension","depth":3,"charIndex":697},{"text":"Q: How do I debug my extension during development?","id":"q-how-do-i-debug-my-extension-during-development","depth":3,"charIndex":1064},{"text":"Q: Can I use CSS-in-JS libraries like styled-components?","id":"q-can-i-use-css-in-js-libraries-like-styled-components","depth":3,"charIndex":1484},{"text":"Q: How do I handle environment variables?","id":"q-how-do-i-handle-environment-variables","depth":3,"charIndex":1713},{"text":"Manifest & Configuration","id":"manifest--configuration","depth":2,"charIndex":1817},{"text":"Q: Can I use dynamic values in my manifest?","id":"q-can-i-use-dynamic-values-in-my-manifest","depth":3,"charIndex":1845},{"text":"Q: How do I add content scripts?","id":"q-how-do-i-add-content-scripts","depth":3,"charIndex":1970},{"text":"Q: What about web accessible resources?","id":"q-what-about-web-accessible-resources","depth":3,"charIndex":2155},{"text":"Multi-browser Support","id":"multi-browser-support","depth":2,"charIndex":2312},{"text":"Q: How do I test my extension in Firefox?","id":"q-how-do-i-test-my-extension-in-firefox","depth":3,"charIndex":2337},{"text":"Q: What are the main differences between Chrome and Firefox?","id":"q-what-are-the-main-differences-between-chrome-and-firefox","depth":3,"charIndex":2497},{"text":"Q: Should I use webextension-polyfill?","id":"q-should-i-use-webextension-polyfill","depth":3,"charIndex":2776},{"text":"Build & Deployment","id":"build--deployment","depth":2,"charIndex":2884},{"text":"Q: How do I build for production?","id":"q-how-do-i-build-for-production","depth":3,"charIndex":2906},{"text":"Q: Why are there no file hashes in the output?","id":"q-why-are-there-no-file-hashes-in-the-output","depth":3,"charIndex":3046},{"text":"Q: How do I package my extension for the Chrome Web Store?","id":"q-how-do-i-package-my-extension-for-the-chrome-web-store","depth":3,"charIndex":3246},{"text":"Q: Can I automate the build process?","id":"q-can-i-automate-the-build-process","depth":3,"charIndex":3471},{"text":"Troubleshooting","id":"troubleshooting","depth":2,"charIndex":3555},{"text":"Q: I'm getting \"Invalid manifest\" errors","id":"q-im-getting-invalid-manifest-errors","depth":3,"charIndex":3574},{"text":"Q: My background script isn't working","id":"q-my-background-script-isnt-working","depth":3,"charIndex":3949},{"text":"Q: Content scripts aren't injecting","id":"q-content-scripts-arent-injecting","depth":3,"charIndex":4313},{"text":"Q: Extension pages are blank","id":"q-extension-pages-are-blank","depth":3,"charIndex":4637},{"text":"Q: How do I report a bug?","id":"q-how-do-i-report-a-bug","depth":3,"charIndex":4947},{"text":"Performance","id":"performance","depth":2,"charIndex":5134},{"text":"Q: My extension bundle is too large","id":"q-my-extension-bundle-is-too-large","depth":3,"charIndex":5149},{"text":"Q: Build times are slow","id":"q-build-times-are-slow","depth":3,"charIndex":5496},{"text":"Integration","id":"integration","depth":2,"charIndex":5763},{"text":"Q: Can I use this with other build tools?","id":"q-can-i-use-this-with-other-build-tools","depth":3,"charIndex":5778},{"text":"Q: How do I migrate from webpack?","id":"q-how-do-i-migrate-from-webpack","depth":3,"charIndex":6073}],"domain":"","frontmatter":{},"version":""},{"id":3,"title":"Getting Started","content":"","routePath":"/guide/","lang":"","toc":[{"text":"Installation","id":"installation","depth":2,"charIndex":-1},{"text":"Quick Start","id":"quick-start","depth":2,"charIndex":-1},{"text":"1. Create your manifest","id":"1-create-your-manifest","depth":3,"charIndex":-1},{"text":"2. Configure Rsbuild","id":"2-configure-rsbuild","depth":3,"charIndex":-1},{"text":"3. Create your extension pages","id":"3-create-your-extension-pages","depth":3,"charIndex":-1},{"text":"4. Background script","id":"4-background-script","depth":3,"charIndex":-1},{"text":"5. Development","id":"5-development","depth":3,"charIndex":-1},{"text":"6. Load in browser","id":"6-load-in-browser","depth":3,"charIndex":-1},{"text":"Chrome","id":"chrome","depth":4,"charIndex":-1},{"text":"Firefox","id":"firefox","depth":4,"charIndex":-1},{"text":"Project Structure","id":"project-structure","depth":2,"charIndex":-1},{"text":"Next Steps","id":"next-steps","depth":2,"charIndex":-1},{"text":"Need Help?","id":"need-help","depth":2,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":4,"title":"Manifest Reference","content":"#\n\nComplete guide to configuring your Chrome Extension Manifest V3 with TypeScript.\n\n\nBasic Structure#\n\n\n\n\nRequired Fields#\n\n\nmanifest_version#\n\n * Type: 3\n * Required: true\n\nMust be 3 for Manifest V3 extensions.\n\n\n\n\nname#\n\n * Type: string\n * Required: true\n\nThe extension name displayed to users.\n\n\n\n\nversion#\n\n * Type: string\n * Required: true\n\nExtension version in semver format.\n\n\n\n\nOptional Fields#\n\n\ndescription#\n\n * Type: string\n * Required: false\n\nShort description of your extension.\n\n\n\n\nicons#\n\n * Type: Record\n * Required: false\n\nExtension icons for different sizes.\n\n\n\n\nExtension Pages#\n\n\naction (Popup)#\n\nConfigure the extension's popup that appears when clicking the extension icon.\n\n\n\n\nbackground (Service Worker)#\n\nConfigure the background service worker.\n\n\n\n\noptions_ui (Options Page)#\n\nConfigure the extension's options page.\n\n\n\n\ndevtools_page (DevTools)#\n\nAdd a panel to Chrome DevTools.\n\n\n\n\nchrome_url_overrides#\n\nOverride browser pages like new tab.\n\n\n\n\nPermissions#\n\n\npermissions#\n\nStandard extension permissions.\n\n\n\n\nhost_permissions#\n\nAccess to specific websites.\n\n\n\n\noptional_permissions#\n\nPermissions requested at runtime.\n\n\n\n\nContent Scripts#\n\nInject scripts into web pages.\n\n\n\n\nWeb Accessible Resources#\n\nMake extension resources available to web pages.\n\n\n\n\nContent Security Policy#\n\nConfigure CSP for extension pages.\n\n\n\n\nComplete Example#\n\nHere's a comprehensive manifest example:\n\n\n\n\nTypeScript Support#\n\nThe plugin provides full TypeScript support for manifest configuration:\n\n\n\n\nDynamic Configuration#\n\nLoad configuration from package.json or environment variables:\n\n","routePath":"/guide/manifest","lang":"","toc":[{"text":"Basic Structure","id":"basic-structure","depth":2,"charIndex":85},{"text":"Required Fields","id":"required-fields","depth":2,"charIndex":106},{"text":"manifest_version","id":"manifest_version","depth":3,"charIndex":125},{"text":"name","id":"name","depth":3,"charIndex":216},{"text":"version","id":"version","depth":3,"charIndex":301},{"text":"Optional Fields","id":"optional-fields","depth":2,"charIndex":386},{"text":"description","id":"description","depth":3,"charIndex":405},{"text":"icons","id":"icons","depth":3,"charIndex":496},{"text":"Extension Pages","id":"extension-pages","depth":2,"charIndex":581},{"text":"action (Popup)","id":"action-popup","depth":3,"charIndex":600},{"text":"background (Service Worker)","id":"background-service-worker","depth":3,"charIndex":700},{"text":"options_ui (Options Page)","id":"options_ui-options-page","depth":3,"charIndex":775},{"text":"devtools_page (DevTools)","id":"devtools_page-devtools","depth":3,"charIndex":847},{"text":"chrome_url_overrides","id":"chrome_url_overrides","depth":3,"charIndex":910},{"text":"Permissions","id":"permissions","depth":2,"charIndex":974},{"text":"permissions","id":"permissions-1","depth":3,"charIndex":-1},{"text":"host_permissions","id":"host_permissions","depth":3,"charIndex":1039},{"text":"optional_permissions","id":"optional_permissions","depth":3,"charIndex":1091},{"text":"Content Scripts","id":"content-scripts","depth":2,"charIndex":1152},{"text":"Web Accessible Resources","id":"web-accessible-resources","depth":2,"charIndex":1205},{"text":"Content Security Policy","id":"content-security-policy","depth":2,"charIndex":1285},{"text":"Complete Example","id":"complete-example","depth":2,"charIndex":1350},{"text":"TypeScript Support","id":"typescript-support","depth":2,"charIndex":1414},{"text":"Dynamic Configuration","id":"dynamic-configuration","depth":2,"charIndex":1511}],"domain":"","frontmatter":{},"version":""},{"id":5,"title":"Multi-browser Support","content":"#\n\nBuild extensions that work on both Chrome and Firefox with a single codebase.\n\n\nOverview#\n\nrsbuild-plugin-web-extension automatically handles differences between Chrome\nand Firefox extension manifests, allowing you to write your extension once and\ndeploy to both browsers.\n\n\nBrowser Differences#\n\n\nManifest Structure#\n\nFEATURE                   CHROME (MANIFEST V3)                      FIREFOX (MANIFEST V2/V3)\nBackground Scripts        background.service_worker                 background.scripts\nOptions Page              options_ui.page                           options_page\nContent Security Policy   content_security_policy.extension_pages   content_security_policy\n\n\nAPI Differences#\n\nAPI       CHROME           FIREFOX\nStorage   chrome.storage   browser.storage\nRuntime   chrome.runtime   browser.runtime\nTabs      chrome.tabs      browser.tabs\n\n\nDevelopment Workflow#\n\n\nChrome Development#\n\nDefault development mode targets Chrome:\n\n\n\nThen load the extension in Chrome:\n\n 1. Open chrome://extensions\n 2. Enable \"Developer mode\"\n 3. Click \"Load unpacked\"\n 4. Select your dist folder\n\n\nFirefox Development#\n\nUse the Firefox environment variable:\n\n\n\nOr add a dedicated script to your package.json:\n\n\n\nThen load in Firefox:\n\n 1. Open about:debugging#/runtime/this-firefox\n 2. Click \"Load Temporary Add-on...\"\n 3. Select any file in your dist folder\n\n\nAutomatic Manifest Conversion#\n\nWhen __FIREFOX__=true is set, the plugin automatically converts your Chrome\nmanifest to Firefox-compatible format:\n\n\nBackground Scripts#\n\nInput (Chrome format):\n\n\n\nOutput (Firefox format):\n\n\n\n\nOptions Page#\n\nInput (Chrome format):\n\n\n\nOutput (Firefox format):\n\n\n\n\nContent Security Policy#\n\nChrome format:\n\n\n\nFirefox format:\n\n\n\n\nCross-browser API Usage#\n\n\nUsing WebExtension Polyfill#\n\nInstall the polyfill for consistent API usage:\n\n\n\nThen use it in your code:\n\n\n\n\nNative API Detection#\n\nAlternatively, detect and use the appropriate API:\n\n\n\n\nBuild Configuration#\n\n\nSingle Build for Both Browsers#\n\nBuild once and it works in both browsers (recommended for simple extensions):\n\n\n\n\nBrowser-specific Builds#\n\nFor extensions with browser-specific features:\n\n\n\n\nTesting Strategy#\n\n\nAutomated Testing#\n\nTest your extension in both browsers using CI:\n\n\n\n\nManual Testing#\n\nCreate a testing checklist:\n\n * Extension loads in Chrome\n * Extension loads in Firefox\n * All features work in Chrome\n * All features work in Firefox\n * Popup displays correctly in both browsers\n * Background script functions in both browsers\n * Content scripts inject properly\n * Storage APIs work consistently\n\n\nCommon Issues#\n\n\nService Worker vs Background Scripts#\n\nProblem: Firefox doesn't fully support service workers yet.\n\nSolution: Use the polyfill or feature detection:\n\n\n\n\nAPI Availability#\n\nProblem: Some APIs are Chrome-only or Firefox-only.\n\nSolution: Feature detection:\n\n\n\n\nManifest Validation#\n\nProblem: Firefox has stricter manifest validation.\n\nSolution: Test your manifest in both browsers and use only supported features.\n\n\nBest Practices#\n\n 1. Use WebExtension Polyfill: Provides consistent API across browsers\n 2. Test Early and Often: Test in both browsers during development\n 3. Feature Detection: Check for API availability before using\n 4. Graceful Degradation: Provide fallbacks for browser-specific features\n 5. Separate Build Targets: Use different builds for different browsers when\n    needed\n\n\nExample: Universal Extension#\n\nHere's a complete example that works in both browsers:\n\n\n\n\n\n","routePath":"/guide/multi-browser","lang":"","toc":[{"text":"Overview","id":"overview","depth":2,"charIndex":82},{"text":"Browser Differences","id":"browser-differences","depth":2,"charIndex":277},{"text":"Manifest Structure","id":"manifest-structure","depth":3,"charIndex":300},{"text":"API Differences","id":"api-differences","depth":3,"charIndex":676},{"text":"Development Workflow","id":"development-workflow","depth":2,"charIndex":857},{"text":"Chrome Development","id":"chrome-development","depth":3,"charIndex":881},{"text":"Firefox Development","id":"firefox-development","depth":3,"charIndex":1095},{"text":"Automatic Manifest Conversion","id":"automatic-manifest-conversion","depth":2,"charIndex":1358},{"text":"Background Scripts","id":"background-scripts","depth":3,"charIndex":1507},{"text":"Options Page","id":"options-page","depth":3,"charIndex":1583},{"text":"Content Security Policy","id":"content-security-policy","depth":3,"charIndex":1653},{"text":"Cross-browser API Usage","id":"cross-browser-api-usage","depth":2,"charIndex":1717},{"text":"Using WebExtension Polyfill","id":"using-webextension-polyfill","depth":3,"charIndex":1744},{"text":"Native API Detection","id":"native-api-detection","depth":3,"charIndex":1854},{"text":"Build Configuration","id":"build-configuration","depth":2,"charIndex":1932},{"text":"Single Build for Both Browsers","id":"single-build-for-both-browsers","depth":3,"charIndex":1955},{"text":"Browser-specific Builds","id":"browser-specific-builds","depth":3,"charIndex":2070},{"text":"Testing Strategy","id":"testing-strategy","depth":2,"charIndex":2147},{"text":"Automated Testing","id":"automated-testing","depth":3,"charIndex":2167},{"text":"Manual Testing","id":"manual-testing","depth":3,"charIndex":2238},{"text":"Common Issues","id":"common-issues","depth":2,"charIndex":2570},{"text":"Service Worker vs Background Scripts","id":"service-worker-vs-background-scripts","depth":3,"charIndex":2587},{"text":"API Availability","id":"api-availability","depth":3,"charIndex":2740},{"text":"Manifest Validation","id":"manifest-validation","depth":3,"charIndex":2845},{"text":"Best Practices","id":"best-practices","depth":2,"charIndex":3000},{"text":"Example: Universal Extension","id":"example-universal-extension","depth":2,"charIndex":3382}],"domain":"","frontmatter":{},"version":""}]